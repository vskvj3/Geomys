syntax = "proto3";

package proto;

option go_package = "internal/replicate/proto";

message Command {
    string command = 1;
    string key = 2;
    string value = 3;
    int32 exp = 4;
    int32 offset = 5;
}

// Command request structure
message CommandRequest {
    int32 node_id = 1;
    Command command = 2;
}

// Response for command execution
message CommandResponse {
    string status = 1;
    string message = 2;
    string value = 3;
}

// Acknowledgment for replication success
message ReplicationAck {
    bool success = 1;
}

// Sync request from follower to leader
message SyncRequestMessage {}

// Sync response containing a list of all previous commands
message SyncResponse {
    repeated Command commands = 1;
}

// Replication Service Definition
service ReplicationService {
    // Follower → Leader (Forward Write Requests)
    rpc ForwardRequest (CommandRequest) returns (CommandResponse);

    // Leader → Followers (Replicate Write Requests)
    rpc ReplicateRequest (Command) returns (ReplicationAck);

    // Follower → Leader (Sync on Restart)
    rpc SyncRequest (SyncRequestMessage) returns (SyncResponse);
}
